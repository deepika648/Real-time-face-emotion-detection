import cv2
from keras.models import model_from_json
import numpy as np
# from keras_preprocessing.image import load_img
json_file = open("D:\\AIML\\SEABORN\\Scripts\\project2\\Face_Emotion_Recognition_Machine_Learning-main\\emotiondetector.json", "r")

model_json = json_file.read()
json_file.close()
model = model_from_json(model_json)

model.load_weights("Face_Emotion_Recognition_Machine_Learning-main//emotiondetector.h5")
haar_file=cv2.data.haarcascades + 'haarcascade_frontalface_default.xml'
face_cascade=cv2.CascadeClassifier(haar_file)

def extract_features(image):
    feature = np.array(image)
    feature = feature.reshape(1,48,48,1)
    return feature/255.0

webcam=cv2.VideoCapture(0)
labels = {0 : 'angry', 1 : 'disgust', 2 : 'fear', 3 : 'happy', 4 : 'neutral', 5 : 'sad', 6 : 'surprise'}
while True:
    i,im=webcam.read()
    gray=cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)
    faces=face_cascade.detectMultiScale(im,1.3,5)
    try: 
        for (p,q,r,s) in faces:
            image = gray[q:q+s,p:p+r]
            cv2.rectangle(im,(p,q),(p+r,q+s),(255,0,0),2)
            image = cv2.resize(image,(48,48))
            img = extract_features(image)
            pred = model.predict(img)
            prediction_label = labels[pred.argmax()]
            # print("Predicted Output:", prediction_label)
            # cv2.putText(im,prediction_label)
            cv2.putText(im, '% s' %(prediction_label), (p-10, q-10),cv2.FONT_HERSHEY_COMPLEX_SMALL,2, (0,0,255))
        cv2.imshow("Output",im)
        cv2.waitKey(27)
    except cv2.error:
        pass






















































































# import cv2
# from keras.models import model_from_json
# import numpy as np
# # from keras_preprocessing.image import load_img
# json_file = open("D:\\AIML\\SEABORN\\Scripts\\project2\\Face_Emotion_Recognition_Machine_Learning-main\\emotiondetector.json", "r")

# model_json = json_file.read()
# json_file.close()
# model = model_from_json(model_json)

# model.load_weights("Face_Emotion_Recognition_Machine_Learning-main//emotiondetector.h5")

# haar_file=cv2.data.haarcascades + 'haarcascade_frontalface_default.xml'
# face_cascade=cv2.CascadeClassifier(haar_file)

# def extract_features(image):
#     feature = np.array(image)
#     feature = feature.reshape(1,48,48,1)
#     return feature/255.0

# webcam=cv2.VideoCapture(0)
# labels = {0 : 'angry', 1 : 'disgust', 2 : 'fear', 3 : 'happy', 4 : 'neutral', 5 : 'sad', 6 : 'surprise'}
# while True:
#     i,im=webcam.read()
#     gray=cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)
#     faces=face_cascade.detectMultiScale(im,1.3,5)
#     try: 
#         for (p,q,r,s) in faces:
#             image = gray[q:q+s,p:p+r]
#             cv2.rectangle(im,(p,q),(p+r,q+s),(255,0,0),2)
#             image = cv2.resize(image,(48,48))
#             img = extract_features(image)
#             pred = model.predict(img)
#             prediction_label = labels[pred.argmax()]
#             # print("Predicted Output:", prediction_label)
#             # cv2.putText(im,prediction_label)
#             cv2.putText(im, '% s' %(prediction_label), (p-10, q-10),cv2.FONT_HERSHEY_COMPLEX_SMALL,2, (0,0,255))
#         cv2.imshow("Output",im)
#         cv2.waitKey(27)
#     except cv2.error:
#         pass


# import cv2
# from keras.models import model_from_json
# import numpy as np

# # Load the pre-trained emotion detection model
# json_file = open("D:\\AIML\\SEABORN\\Scripts\\project2\\Face_Emotion_Recognition_Machine_Learning-main\\emotiondetector.json", "r")
# model_json = json_file.read()
# json_file.close()
# model = model_from_json(model_json)
# model.load_weights("Face_Emotion_Recognition_Machine_Learning-main//emotiondetector.h5")

# # Load Haar Cascade for face detection
# haar_file = cv2.data.haarcascades + 'haarcascade_frontalface_default.xml'
# face_cascade = cv2.CascadeClassifier(haar_file)

# # Function to preprocess face image for emotion recognition
# def extract_features(image):
#     feature = np.array(image)
#     feature = feature.reshape(1, 48, 48, 1)  # Reshaping to match the model's expected input
#     return feature / 255.0  # Normalizing pixel values

# # Start webcam capture for real-time video
# webcam = cv2.VideoCapture(0)

# # Emotion labels corresponding to model output
# labels = {0: 'angry', 1: 'disgust', 2: 'fear', 3: 'happy', 4: 'neutral', 5: 'sad', 6: 'surprise'}

# while True:
#     # Capture the current frame from the webcam
#     ret, im = webcam.read()
    
#     # Convert the frame to grayscale for face detection
#     gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
    
#     # Detect faces in the grayscale image
#     faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)
    
#     # Process each face detected
#     for (p, q, r, s) in faces:
#         # Extract face region of interest (ROI)
#         face_roi = gray[q:q+s, p:p+r]
        
#         # Draw a rectangle around the face
#         cv2.rectangle(im, (p, q), (p + r, q + s), (255, 0, 0), 2)
        
#         # Resize the face ROI to 48x48 pixels as required by the model
#         face_roi_resized = cv2.resize(face_roi, (48, 48))
        
#         # Preprocess the face image for prediction
#         img = extract_features(face_roi_resized)
        
#         # Make emotion prediction
#         pred = model.predict(img)
#         prediction_label = labels[pred.argmax()]
        
#         # Display the emotion label on the video frame
#         cv2.putText(im, '% s' % prediction_label, (p - 10, q - 10), cv2.FONT_HERSHEY_COMPLEX_SMALL, 2, (0, 0, 255))
    
#     # Show the frame with face detection and emotion recognition
#     cv2.imshow("Output", im)

#     # Press 'q' to exit the loop
#     if cv2.waitKey(1) & 0xFF == ord('q'):
#         break

# # Release webcam and close OpenCV windows
# webcam.release()
# cv2.destroyAllWindows()
